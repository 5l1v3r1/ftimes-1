########################################################################
#
# $Id: configure.in,v 1.112 2014/07/18 06:31:42 mavrik Exp $
#
########################################################################

dnl ####################################################################
dnl #
dnl # Initialize.
dnl #
dnl ####################################################################

AC_INIT(src/ftimes.c)
AC_PREREQ(2.68)
AC_CONFIG_AUX_DIR(utils)
AC_PREFIX_DEFAULT(/usr/local/ftimes)
cgidir='${exec_prefix}/cgi'
docdir='${exec_prefix}/doc'
etcdir='${exec_prefix}/etc'
logdir='${exec_prefix}/log'
mandir='${exec_prefix}/man'
rundir='${exec_prefix}/run'
AC_SUBST(cgidir)
AC_SUBST(docdir)
AC_SUBST(etcdir)
AC_SUBST(logdir)
AC_SUBST(mandir)
AC_SUBST(rundir)

additional_testdirs=""
additional_ftimes_testdirs=""
ap_srcs=""
ap_incs=""
extension=""

AC_CANONICAL_SYSTEM
case "${target_os}" in
*aix*)
  OS_CFLAGS="-DUNIX"
  AC_DEFINE(FTimes_AIX, 1, [Define to 1 if the target OS is AIX.])
  AC_DEFINE(USE_AP_SNPRINTF, 1, [Define to 1 if snprintf() support is enabled.])
  ac_cv_func_malloc_0_nonnull="yes"
  ap_srcs="ap_snprintf.c"
  ap_incs="ap_snprintf.h"
  ;;
*bsd*)
  OS_CFLAGS="-DUNIX"
  AC_DEFINE(FTimes_BSD, 1, [Define to 1 if the target OS is BSD.])
  ;;
*darwin*)
  OS_CFLAGS="-DUNIX"
  AC_DEFINE(FTimes_MACOS, 1, [Define to 1 if the target OS is MacOS.])
  ;;
*hpux*)
  OS_CFLAGS="-DUNIX"
  AC_DEFINE(FTimes_HPUX, 1, [Define to 1 if the target OS is HP-UX.])
  AC_DEFINE(USE_AP_SNPRINTF, 1, [Define to 1 if snprintf() support is enabled.])
  ap_srcs="ap_snprintf.c"
  ap_incs="ap_snprintf.h"
  ;;
*linux*)
  OS_CFLAGS="-DUNIX"
  AC_DEFINE(FTimes_LINUX, 1, [Define to 1 if the target OS is Linux.])
  case "${host_cpu}" in
  arm)
    ac_cv_func_malloc_0_nonnull="yes"
    ;;
  *)
    ;;
  esac
  ;;
*mingw32*)
  OS_CFLAGS="-DWINNT -DWIN32 -DMINGW32 -DUSE_SDDL"
  LIBS="-lwsock32"
  AC_DEFINE(FTimes_MINGW32, 1, [Define to 1 if the target OS is MinGW32.])
  ac_cv_func_malloc_0_nonnull="yes"
  additional_ftimes_testdirs="common_windows_ads"
  extension=".exe"
  ;;
*solaris*)
  OS_CFLAGS="-DUNIX"
  LIBS="-ldl"
  AC_DEFINE(FTimes_SOLARIS, 1, [Define to 1 if the target OS is Solaris.])
  ;;
*)
  echo
  echo "The target operating system, ${target_os}, is not currently supported."
  echo
  exit
  ;;
esac

AC_SUBST(additional_testdirs)
AC_SUBST(additional_ftimes_testdirs)
AC_SUBST(ap_srcs)
AC_SUBST(ap_incs)
AC_SUBST(extension)

case ${host_cpu} in
alpha*)
  AC_DEFINE(APP_CPU_ALPHA, 1, [Define to 1 if the host cpu is alpha.])
  ;;
amd64*)
  AC_DEFINE(APP_CPU_AMD64, 1, [Define to 1 if the host cpu is amd64.])
  ;;
arm*)
  AC_DEFINE(APP_CPU_ARM, 1, [Define to 1 if the host cpu is arm.])
  ;;
hppa*)
  AC_DEFINE(APP_CPU_HPPA, 1, [Define to 1 if the host cpu is hppa.])
  ;;
ia64*)
  AC_DEFINE(APP_CPU_IA64, 1, [Define to 1 if the host cpu is ia64.])
  ;;
x86_64*)
  AC_DEFINE(APP_CPU_X86_64, 1, [Define to 1 if the host cpu is x86_64.])
  ;;
i?86*)
  AC_DEFINE(APP_CPU_I386, 1, [Define to 1 if the host cpu is iX86.])
  ;;
powerpc*)
  AC_DEFINE(APP_CPU_POWERPC, 1, [Define to 1 if the host cpu is powerpc.])
  ;;
sparc*)
  AC_DEFINE(APP_CPU_SPARC, 1, [Define to 1 if the host cpu is sparc.])
  ;;
*)
  echo
  echo "The target cpu, ${host_cpu}, is not currently supported."
  echo
  exit
  ;;
esac

dnl ####################################################################
dnl #
dnl # Initialize CFLAGS before AC_PROG_CC does.
dnl #
dnl ####################################################################

if test -n "${CFLAGS}" ; then
  CFLAGS="${CFLAGS} -Wall ${OS_CFLAGS}"
else
  CFLAGS="-O2 -Wall ${OS_CFLAGS}"
fi

dnl ####################################################################
dnl #
dnl # Check for programs.
dnl #
dnl ####################################################################

AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl ####################################################################
dnl #
dnl # Check for libraries.
dnl #
dnl ####################################################################

AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, socket)

dnl ####################################################################
dnl #
dnl # Check for header files.
dnl #
dnl ####################################################################

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_MAJOR
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h netdb.h netinet/in.h stdlib.h string.h strings.h sys/param.h sys/socket.h sys/statfs.h sys/statvfs.h sys/time.h sys/vfs.h unistd.h])

AC_CHECK_HEADERS(sys/mount.h,,,
  [
    #if HAVE_SYS_TYPES_H
    #include <sys/types.h>
    #endif
  ]
)

dnl ####################################################################
dnl #
dnl # Check for typedefs, structures, and compiler characteristics.
dnl #
dnl ####################################################################

AC_C_CONST
AC_TYPE_SIZE_T
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_SYS_LARGEFILE

dnl ####################################################################
dnl #
dnl # Check for library functions.
dnl #
dnl ####################################################################

AC_FUNC_LSTAT
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([fseeko getcwd gethostbyname memset modf socket strcasecmp strchr strerror strncasecmp strnlen strstr strtoul uname])

dnl ####################################################################
dnl #
dnl # Check for KLEL.
dnl #
dnl ####################################################################

CheckKlelComponents()
{
  KLELDIR=${1}
  INCLUDE_LIST="klel.h"
  for INCLUDE_FILE in ${INCLUDE_LIST} ; do
    if test ! -f "${KLELDIR}/include/${INCLUDE_FILE}" ; then
      return 1
    fi
  done
  kleldir=${KLELDIR}
  return 0
}

AC_MSG_CHECKING([for KLEL support])
AC_ARG_WITH(klel,
  [  --with-klel=DIR         Use KLEL with includes and libs from [DIR]/include and [DIR]/lib
  --without-klel          Disable KLEL support],
  [
    dnl ################################################################
    dnl #
    dnl # Check the specified location only.
    dnl #
    dnl ################################################################
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      use_klel="2"
      ;;
    *)
      use_klel="1"
      CheckKlelComponents "${withval}"
      ;;
    esac
  ],
  [
    use_klel="0"
  ]
)
if test ${use_klel} -eq 1 ; then
  AC_DEFINE(USE_KLEL, 1, [Define to 1 if KLEL support is enabled.])
  if test -z "${kleldir}" ; then
    AC_MSG_RESULT(missing or incomplete)
    echo
    echo "Unable to locate required KLEL components. Use --with-klel=DIR to"
    echo "specify a known/different location, or use --without-klel to disable"
    echo "this support. The following files must exist for this check to pass:"
    echo
    echo "  DIR/include/klel.h"
    echo
    exit 1
  else
    AC_MSG_RESULT(${kleldir})
    klel_srcs=""
    klel_incs=""
    klel_incflags="-I${kleldir}/include"
    klel_libflags="-L${kleldir}/lib -lklel"
    AC_SUBST(klel_srcs)
    AC_SUBST(klel_incs)
    AC_SUBST(klel_incflags)
    AC_SUBST(klel_libflags)
  fi
elif test ${use_klel} -eq 2 ; then
  AC_MSG_RESULT(check explicitly disabled)
else
  AC_MSG_RESULT(not enabled)
fi

dnl ####################################################################
dnl #
dnl # Check for OpenSSL.
dnl #
dnl ####################################################################

CheckSslComponents()
{
  SSLDIR=${1}
  INCLUDE_LIST="crypto.h err.h pem.h rand.h ssl.h x509.h"
  for INCLUDE_FILE in ${INCLUDE_LIST} ; do
    if test ! -f "${SSLDIR}/include/openssl/${INCLUDE_FILE}" ; then
      return 1
    fi
  done
  ssldir=${SSLDIR}
  return 0
}

AC_MSG_CHECKING([for OpenSSL support])
AC_ARG_WITH(ssl,
  [  --with-ssl=DIR          Use OpenSSL with includes and libs from [DIR]/include/openssl and [DIR]/lib
  --without-ssl           Disable OpenSSL support],
  [
    dnl ################################################################
    dnl #
    dnl # Check the specified location only.
    dnl #
    dnl ################################################################
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      use_ssl="0"
      ;;
    *)
      use_ssl="1"
      CheckSslComponents "${withval}"
      ;;
    esac
  ],
  [
    dnl ################################################################
    dnl #
    dnl # Search common OpenSSL locations.
    dnl #
    dnl ################################################################
    use_ssl="1"
    for basedir in /usr /usr/local /usr/pkg /opt /opt/local ; do
      for dir in ${basedir} ${basedir}/openssl ${basedir}/ssl ; do
        CheckSslComponents ${dir} && break 2
      done
    done
  ]
)
if test ${use_ssl} -ne 0 ; then
  AC_DEFINE(USE_SSL, 1, [Define to 1 if OpenSSL support is enabled.])
  if test -z "${ssldir}" ; then
    AC_MSG_RESULT(missing or incomplete)
    echo
    echo "Unable to locate required OpenSSL components. Use --with-ssl=DIR to"
    echo "specify a known/different location, or use --without-ssl to disable"
    echo "this support. The following files must exist for this check to pass:"
    echo
    echo "  DIR/include/openssl/crypto.h"
    echo "  DIR/include/openssl/err.h"
    echo "  DIR/include/openssl/pem.h"
    echo "  DIR/include/openssl/rand.h"
    echo "  DIR/include/openssl/ssl.h"
    echo "  DIR/include/openssl/x509.h"
    echo
    exit 1
  else
    AC_MSG_RESULT(${ssldir})
    ssl_srcs="ssl.c"
    ssl_incs="ssl.h ssl-pool.h"
    ssl_incflags="-I${ssldir}/include"
    case "${target_os}" in
    *mingw32*)
      ssl_libflags="-L${ssldir}/lib -lssl -lcrypto -lws2_32 -lgdi32" # Order matters -- ws2_32 and gdi32 must follow crypto.
      ;;
    *)
      ssl_libflags="-L${ssldir}/lib -lssl -lcrypto"
      ;;
    esac
    AC_SUBST(ssl_srcs)
    AC_SUBST(ssl_incs)
    AC_SUBST(ssl_incflags)
    AC_SUBST(ssl_libflags)
  fi
else
  AC_MSG_RESULT(check explicitly disabled)
fi

dnl ####################################################################
dnl #
dnl # Check for PCRE.
dnl #
dnl ####################################################################

CheckPcreComponents()
{
  PCREDIR=${1}
  INCLUDE_LIST="pcre.h"
  for INCLUDE_FILE in ${INCLUDE_LIST} ; do
    if test ! -f "${PCREDIR}/include/${INCLUDE_FILE}" ; then
      return 1
    fi
  done
  pcredir=${PCREDIR}
  return 0
}

AC_MSG_CHECKING([for PCRE support])
AC_ARG_WITH(pcre,
  [  --with-pcre=DIR         Use PCRE with includes and libs from [DIR]/include and [DIR]/lib
  --without-pcre          Disable PCRE support],
  [
    dnl ################################################################
    dnl #
    dnl # Check the specified location only.
    dnl #
    dnl ################################################################
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      use_pcre="0"
      ;;
    *)
      use_pcre="1"
      CheckPcreComponents "${withval}"
      ;;
    esac
  ],
  [
    dnl ################################################################
    dnl #
    dnl # Search common PCRE locations.
    dnl #
    dnl ################################################################
    use_pcre="1"
    for basedir in /usr /usr/local /usr/pkg /opt /opt/local ; do
      for dir in ${basedir} ${basedir}/pcre ; do
        CheckPcreComponents ${dir} && break 2
      done
    done
  ]
)
if test ${use_pcre} -ne 0 ; then
  AC_DEFINE(USE_PCRE, 1, [Define to 1 if PCRE support is enabled.])
  if test -z "${pcredir}" ; then
    AC_MSG_RESULT(missing or incomplete)
    echo
    echo "Unable to locate required PCRE components. Use --with-pcre=DIR to"
    echo "specify a known/different location, or use --without-pcre to disable"
    echo "this support. The following files must exist for this check to pass:"
    echo
    echo "  DIR/include/pcre.h"
    echo
    exit 1
  else
    AC_MSG_RESULT(${pcredir})
    pcre_srcs=""
    pcre_incs=""
    pcre_incflags="-I${pcredir}/include"
    pcre_libflags="-L${pcredir}/lib -lpcre"
    case "${target_os}" in
    *mingw*)
      if test -z "${CFLAGS}" ; then
        CFLAGS="-DPCRE_STATIC"
      else
        CFLAGS="${CFLAGS} -DPCRE_STATIC"
      fi
      ;;
    esac
    AC_SUBST(pcre_srcs)
    AC_SUBST(pcre_incs)
    AC_SUBST(pcre_incflags)
    AC_SUBST(pcre_libflags)
  fi
else
  AC_MSG_RESULT(check explicitly disabled)
fi

dnl ####################################################################
dnl #
dnl # Check for Perl.
dnl #
dnl ####################################################################

CheckPerl()
{
  REFERENCE_PERL=${1}
  if test ! -f "${REFERENCE_PERL}" ; then
    return 1
  fi
  if test ! -x "${REFERENCE_PERL}" ; then
    return 1
  fi
  perl_version=`${REFERENCE_PERL} -V:version | awk -F= '{print $2}' | sed "s/'//g; s/;//;"`
  return 0
}

AC_MSG_CHECKING([for embedded Perl support])
AC_ARG_WITH(perl,
  [  --with-perl=PATH        Embed Perl using PATH as the reference version (disabled by default)],
  [
    dnl ################################################################
    dnl #
    dnl # Check the specified reference version only.
    dnl #
    dnl ################################################################
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      use_perl="0"
      ;;
    *)
      use_perl="1"
      CheckPerl "${withval}"
      ;;
    esac
  ],
  [
    use_perl="0"
  ]
)
if test ${use_perl} -ne 0 ; then
  case "${target_os}" in
  *mingw*)
    AC_MSG_RESULT([this feature can not be enabled on this platform (aborting)])
    exit 1
    ;;
  esac
  AC_DEFINE(USE_EMBEDDED_PERL, 1, [Define to 1 if embedded Perl support is enabled.])
  if test -z "${perl_version}" ; then
    AC_MSG_RESULT(missing or incomplete)
    echo
    echo "Unable to locate required Perl components. Use --with-perl=PATH to"
    echo "specify a known/different Perl binary."
    echo
    exit 1
  else
    AC_MSG_RESULT(${perl_version})
    perl_cflags=`${REFERENCE_PERL} -MExtUtils::Embed -e ccflags`
    case "${target_os}" in
    *mingw32*)
      perl_incflags=`${REFERENCE_PERL} -MExtUtils::Embed -e perl_inc | tr '\\\\' '/'`
      perl_libflags=`${REFERENCE_PERL} -MExtUtils::Embed -e ldopts | tr '\\\\' '/'`
      ;;
    *)
      perl_incflags=`${REFERENCE_PERL} -MExtUtils::Embed -e perl_inc`
      perl_libflags=`${REFERENCE_PERL} -MExtUtils::Embed -e ldopts`
      case `${REFERENCE_PERL} -V:usethreads` in
      usethreads=?define??)
        AC_DEFINE(USE_EMBEDDED_PERL_XSUB, 1, [Define to 1 if embedded Perl needs XSUB.h.])
        ;;
      esac
      ;;
    esac
    perl5_lib="${prefix}/lib/perl5"
    perl5_site_lib="${prefix}/lib/perl5/site_perl"
    AC_DEFINE_UNQUOTED(PERL5LIB, "${perl5_site_lib}:${perl5_lib}", [Location of Perl library components specific to WebJob.])
    AC_SUBST(perl_cflags)
    AC_SUBST(perl_incflags)
    AC_SUBST(perl_libflags)
  fi
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check for Python.
dnl #
dnl ####################################################################

python_version=""
python_version_major="0"
python_version_floor="3"

CheckPython()
{
  REFERENCE_PYTHON=${1}
  if test ! -f "${REFERENCE_PYTHON}" ; then
    return 1
  fi
  if test ! -x "${REFERENCE_PYTHON}" ; then
    return 1
  fi
  python_version=`${REFERENCE_PYTHON} --version 2>&1 | awk '/^Python [[0-9]]/{print $2}'`
  if test -n "${python_version}" ; then
    python_version_major=`echo ${python_version} | awk -F. '{print $1}'`
  fi
  return 0
}

AC_MSG_CHECKING([for embedded Python support])
AC_ARG_WITH(python,
  [  --with-python=PATH      Embed Python using PATH as the reference version (disabled by default)],
  [
    dnl ################################################################
    dnl #
    dnl # Check the specified reference version only.
    dnl #
    dnl ################################################################
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      use_python="0"
      ;;
    *)
      use_python="1"
      CheckPython "${withval}"
      ;;
    esac
  ],
  [
    use_python="0"
  ]
)
if test ${use_python} -ne 0 ; then
  case "${target_os}" in
  *mingw*)
    AC_MSG_RESULT([this feature can not be enabled on this platform (aborting)])
    exit 1
    ;;
  esac
  AC_DEFINE(USE_EMBEDDED_PYTHON, 1, [Define to 1 if embedded Python 3.X.X support is enabled.])
  if test -z "${python_version}" -o "${python_version_major}" -lt "${python_version_floor}" ; then
    AC_MSG_RESULT(missing or incomplete)
    echo
    echo "Unable to locate required Python 3.X.X components. Use --with-python=PATH to"
    echo "specify a known/different Python 3.X.X binary. In particular, Python's major"
    echo "version number must be 3 or higher."
    echo
    exit 1
  else
    AC_MSG_RESULT(${python_version})
    python_cflags=`${REFERENCE_PYTHON}-config --cflags`
    python_incflags=`${REFERENCE_PYTHON}-config --includes`
    python_libflags=`${REFERENCE_PYTHON}-config --ldflags`
    AC_SUBST(python_cflags)
    AC_SUBST(python_incflags)
    AC_SUBST(python_libflags)
  fi
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not KLEL release number is ok.
dnl #
dnl ####################################################################

if test ${use_klel} -eq 1 ; then
  OLD_CFLAGS=${CFLAGS}
  OLD_LIBS=${LIBS}
  OLD_LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ; LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${kleldir}/lib" ; export LD_LIBRARY_PATH
  CFLAGS="${CFLAGS} ${klel_incflags} ${pcre_incflags}"
  LIBS="${LIBS} ${klel_libflags} ${pcre_libflags}"
  AC_MSG_CHECKING([whether or not KLEL release number is ok])
  AC_RUN_IFELSE(
    [
      AC_LANG_SOURCE(
      [[
#include <klel.h>
int main() { return (KlelGetReleaseNumber() >= 0x10100800) ? 0 : 1; }
      ]]
      )
    ],
    [klel_version_ok="1"],
    [klel_version_ok="0"],
    [klel_version_ok="2"]
  )
  if test ${klel_version_ok} -eq 1 ; then
    AC_MSG_RESULT([yes])
  elif test ${klel_version_ok} -eq 2 ; then
    AC_MSG_RESULT([skipped (cross-compiling)])
  else
    AC_MSG_RESULT([no (0x10100800 or higher required)])
    exit 1
  fi
  CFLAGS=${OLD_CFLAGS}
  LIBS=${OLD_LIBS}
  LD_LIBRARY_PATH=${OLD_LD_LIBRARY_PATH} ; export LD_LIBRARY_PATH
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to enable XMagic support.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to enable XMagic support])
AC_ARG_ENABLE(xmagic,
  [  --disable-xmagic        Disable XMagic support (enabled by default)],
  [
    case `echo ${enableval} | tr "A-Z" "a-z"` in
    yes)
      enable_xmagic="1"
      ;;
    *)
      enable_xmagic="0"
      ;;
    esac
  ],
  [ enable_xmagic="1" ]
)
if test ${enable_xmagic} -eq 1 ; then
  if test ${use_pcre} -eq 1 ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_XMAGIC, 1, [Define to 1 if XMagic support is enabled.])
    xmagic_srcs="xmagic.c"
    xmagic_incs="xmagic.h"
    AC_SUBST(xmagic_srcs)
    AC_SUBST(xmagic_incs)
  else
    AC_MSG_RESULT([PCRE support is required, but it has been explicitly disabled (aborting)])
    exit 1
  fi
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to enable file hooks.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to enable file hooks])
AC_ARG_ENABLE(file-hooks,
  [  --enable-file-hooks     Enable file hooks (disabled by default)],
  [
    case `echo ${enableval} | tr "A-Z" "a-z"` in
    yes)
      enable_file_hooks="1"
      ;;
    *)
      enable_file_hooks="0"
      ;;
    esac
  ],
  [ enable_file_hooks="0" ]
)
if test ${enable_file_hooks} -eq 1 ; then
  case "${target_os}" in
  *mingw*)
    AC_MSG_RESULT([this feature can not be enabled on this platform (aborting)])
    exit 1
    ;;
  esac
  if test ${use_klel} -eq 1 ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_FILE_HOOKS, 1, [Define to 1 if file hooks are enabled.])
    hook_srcs="hook.c"
    hook_incs="hook.h"
    AC_SUBST(hook_srcs)
    AC_SUBST(hook_incs)
  elif test ${use_klel} -eq 2 ; then
    AC_MSG_RESULT([KLEL support is required, but it has been explicitly disabled (aborting)])
    exit 1
  else
    AC_MSG_RESULT([KLEL support is required, but it has not been explicitly enabled (aborting)])
    exit 1
  fi
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to enable pre-mem{set,cpy} hash logic.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to enable pre-mem{set,cpy} hash logic])
AC_ARG_ENABLE(hash-pre-msmc,
  [  --enable-hash-pre-msmc  Enable pre-mem{set,cpy} hash logic (disabled by default)],
  [ AC_MSG_RESULT(yes)
    AC_DEFINE(MD5_PRE_MEMSET_MEMCPY, 1, [Define to 1 if pre-mem{set,cpy} hash logic is enabled.])
    AC_DEFINE(SHA1_PRE_MEMSET_MEMCPY, 1, [Define to 1 if pre-mem{set,cpy} hash logic is enabled.])
    AC_DEFINE(SHA256_PRE_MEMSET_MEMCPY, 1, [Define to 1 if pre-mem{set,cpy} hash logic is enabled.])
  ],
  [ AC_MSG_RESULT(no) ]
)

dnl ####################################################################
dnl #
dnl # Initialize variables needed by several follow-on sections.
dnl #
dnl ####################################################################

install_lib_perl="0"

doc_makefiles="doc/Makefile doc/ftimes/Makefile"
etc_makefiles="etc/Makefile etc/ftimes-dig.cfg/Makefile etc/ftimes-get.cfg/Makefile etc/ftimes-map.cfg/Makefile"
if test ${enable_xmagic} -eq 1 ; then
  etc_makefiles="${etc_makefiles} etc/xmagic/Makefile"
fi
lib_makefiles="lib/Makefile"
test_makefiles="
  tests/Makefile
  tests/ftimes/Makefile
  tests/ftimes/common/Makefile
  tests/ftimes/common/compare/Makefile
  tests/ftimes/common/compare/test_1/Makefile
  tests/ftimes/common/compare/test_2/Makefile
  tests/ftimes/common/compare/test_3/Makefile
  tests/ftimes/common/decoder/Makefile
  tests/ftimes/common/decoder/test_1/Makefile
  tests/ftimes/common/dig/Makefile
  tests/ftimes/common/dig/test_1/Makefile
  tests/ftimes/common/dig/test_2/Makefile
  tests/ftimes/common/dig/test_3/Makefile
  tests/ftimes/common/dig/test_4/Makefile
  tests/ftimes/common/map/Makefile
  tests/ftimes/common/map/test_1/Makefile
  tests/ftimes/common/map/test_2/Makefile
  tests/ftimes/common/map/test_3/Makefile
  tests/ftimes/common/map/test_4/Makefile
  tests/ftimes/common/map/test_5/Makefile
  tests/ftimes/common/map/test_6/Makefile
  tests/ftimes/common/map/test_7/Makefile
  tests/ftimes/common_windows_ads/Makefile
  tests/ftimes/common_windows_ads/map/Makefile
  tests/ftimes/common_windows_ads/map/test_1/Makefile
  "
tool_makefiles="tools/Makefile"

doc_subdirs="ftimes"
etc_subdirs="ftimes-dig.cfg ftimes-get.cfg ftimes-map.cfg"
if test ${enable_xmagic} -eq 1 ; then
  etc_subdirs="${etc_subdirs} xmagic"
fi
lib_subdirs=""
test_subdirs="ftimes"
tool_subdirs=""

tool_config_subdirs=""

html_files="ftimes.html"
man1_files="ftimes.1"

dnl ####################################################################
dnl #
dnl # Check whether or not to install everything.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install everything])
AC_ARG_WITH(everything,
  [  --with-everything       Install everything (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_everything="0"
      ;;
    *)
      install_everything="1"
      ;;
    esac
  ],
  [
    install_everything="0"
  ]
)
if test ${install_everything} -ne 0 ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install server-side components.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install server-side components])
AC_ARG_WITH(server-side,
  [  --with-server-side      Install server-side components (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_server="0"
      ;;
    *)
      install_server="1"
      ;;
    esac
  ],
  [
    install_server="0"
  ]
)
if test ${install_everything} -ne 0 -o ${install_server} -ne 0 ; then
  AC_MSG_RESULT(yes)
  server_list="nph-ftimes.cgi"
  etc_makefiles="${etc_makefiles} etc/nph-ftimes.cfg/Makefile"
  etc_subdirs="${etc_subdirs} nph-ftimes.cfg"
  tool_subdirs="${tool_subdirs} ${server_list}"
  tool_makefiles="${tool_makefiles} "`{ for item in ${server_list} ; do echo ${item} | sed 's,^,tools/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install all utilities.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install all utilities])
AC_ARG_WITH(all-tools,
  [  --with-all-tools        Install all utilities (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_all_tools="0"
      ;;
    *)
      install_all_tools="1"
      ;;
    esac
  ],
  [
    install_all_tools="0"
  ]
)
if test ${install_everything} -ne 0 -o ${install_all_tools} -ne 0 ; then
  AC_MSG_RESULT(yes)
  install_all_tools="1"
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install dbm utilities.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install dbm utilities])
AC_ARG_WITH(dbm-tools,
  [  --with-dbm-tools        Install dbm utilities (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_dbm="0"
      ;;
    *)
      install_dbm="1"
      ;;
    esac
  ],
  [
    if test ${install_all_tools} -eq 0 ; then
      install_dbm="0"
    else
      install_dbm="1"
    fi
  ]
)
if test ${install_dbm} -ne 0 ; then
  AC_MSG_RESULT(yes)
  dbm_list="ftimes-dbm-bash ftimes-dbm-dump ftimes-dbm-find ftimes-dbm-make ftimes-dbm-reap ftimes-dbm-weed"
  doc_subdirs="${doc_subdirs} ${dbm_list}"
  doc_makefiles="${doc_makefiles} "`{ for item in ${dbm_list} ; do echo ${item} | sed 's,^,doc/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
  html_files="${html_files} "`{ for item in ${dbm_list} ; do echo ${item} | sed 's/$/.html/;' ; done ; } | tr '\n' ' '`
  man1_files="${man1_files} "`{ for item in ${dbm_list} ; do echo ${item} | sed 's/$/.1/;' ; done ; } | tr '\n' ' '`
  tool_subdirs="${tool_subdirs} ${dbm_list}"
  tool_makefiles="${tool_makefiles} "`{ for item in ${dbm_list} ; do echo ${item} | sed 's,^,tools/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install dig utilities.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install dig utilities])
AC_ARG_WITH(dig-tools,
  [  --with-dig-tools        Install dig utilities (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_dig="0"
      ;;
    *)
      install_dig="1"
      ;;
    esac
  ],
  [
    if test ${install_all_tools} -eq 0 ; then
      install_dig="0"
    else
      install_dig="1"
    fi
  ]
)
if test ${install_dig} -ne 0 ; then
  AC_MSG_RESULT(yes)
  dig_list="ftimes-crv2dbi ftimes-crv2raw ftimes-dig2ctx ftimes-dig2dbi hipdig"
  doc_subdirs="${doc_subdirs} ${dig_list}"
  doc_makefiles="${doc_makefiles} "`{ for item in ${dig_list} ; do echo ${item} | sed 's,^,doc/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
  html_files="${html_files} "`{ for item in ${dig_list} ; do echo ${item} | sed 's/$/.html/;' ; done ; } | tr '\n' ' '`
  man1_files="${man1_files} "`{ for item in ${dig_list} ; do echo ${item} | sed 's/$/.1/;' ; done ; } | tr '\n' ' '`
  tool_subdirs="${tool_subdirs} dig"
  tool_makefiles="${tool_makefiles} tools/dig/Makefile"
  additional_testdirs="${additional_testdirs} ftimes-crv2raw hipdig"
  test_makefiles="
${test_makefiles}
tests/ftimes-crv2raw/Makefile
tests/ftimes-crv2raw/common/Makefile
tests/ftimes-crv2raw/common/carve/Makefile
tests/ftimes-crv2raw/common/carve/test_1/Makefile
tests/hipdig/Makefile
tests/hipdig/common/Makefile
tests/hipdig/common/dig/Makefile
tests/hipdig/common/dig/test_1/Makefile
"
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install hashdig utilities.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install hashdig utilities])
AC_ARG_WITH(hashdig-tools,
  [  --with-hashdig-tools    Install hashdig utilities (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_hashdig="0"
      ;;
    *)
      install_hashdig="1"
      ;;
    esac
  ],
  [
    if test ${install_all_tools} -eq 0 ; then
      install_hashdig="0"
    else
      install_hashdig="1"
    fi
  ]
)
if test ${install_hashdig} -ne 0 ; then
  AC_MSG_RESULT(yes)
  hashdig_list="hashdig-bash hashdig-bind hashdig-dump hashdig-filter hashdig-find hashdig-harvest hashdig-harvest-sunsolve hashdig-make hashdig-resolve-sunsolve hashdig-stat hashdig-weed"
  doc_subdirs="${doc_subdirs} ${hashdig_list}"
  doc_makefiles="${doc_makefiles} "`{ for item in ${hashdig_list} ; do echo ${item} | sed 's,^,doc/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
  html_files="${html_files} "`{ for item in ${hashdig_list} ; do echo ${item} | sed 's/$/.html/;' ; done ; } | tr '\n' ' '`
  man1_files="${man1_files} "`{ for item in ${hashdig_list} ; do echo ${item} | sed 's/$/.1/;' ; done ; } | tr '\n' ' '`
  tool_subdirs="${tool_subdirs} hashdig"
  tool_makefiles="${tool_makefiles} tools/hashdig/Makefile"
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Check whether or not to install map utilities.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([whether to install map utilities])
AC_ARG_WITH(map-tools,
  [  --with-map-tools        Install map utilities (disabled by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    no)
      install_map="0"
      ;;
    *)
      install_map="1"
      ;;
    esac
  ],
  [
    if test ${install_all_tools} -eq 0 ; then
      install_map="0"
    else
      install_map="1"
    fi
  ]
)
if test ${install_map} -ne 0 ; then
  AC_MSG_RESULT(yes)
  map_list="ftimes-bimvl ftimes-cat ftimes-cmp2dbi ftimes-cmp2diff ftimes-encoder ftimes-grabber ftimes-map2dbi ftimes-map2mac ftimes-proximo ftimes-sizimus ftimes-sortini ftimes-xformer ftimes-xpa hashcp tarmap zipmap"
  doc_subdirs="${doc_subdirs} ${map_list}"
  doc_makefiles="${doc_makefiles} "`{ for item in ${map_list} ; do echo ${item} | sed 's,^,doc/,; s,$,/Makefile,;' ; done ; } | tr '\n' ' '`
  html_files="${html_files} "`{ for item in ${map_list} ; do echo ${item} | sed 's/$/.html/;' ; done ; } | tr '\n' ' '`
  man1_files="${man1_files} "`{ for item in ${map_list} ; do echo ${item} | sed 's/$/.1/;' ; done ; } | tr '\n' ' '`
  tool_subdirs="${tool_subdirs} ftimes-bimvl ftimes-cat ftimes-cmp2diff ftimes-encoder ftimes-grabber ftimes-proximo ftimes-sizimus ftimes-sortini ftimes-xformer ftimes-xpa hashcp map tarmap zipmap"
  tool_config_subdirs="${tool_config_subdirs} ftimes-cat ftimes-xpa hashcp tarmap"
  tool_makefiles="${tool_makefiles} tools/ftimes-bimvl/Makefile tools/ftimes-cat/Makefile tools/ftimes-cmp2diff/Makefile tools/ftimes-encoder/Makefile tools/ftimes-grabber/Makefile tools/ftimes-proximo/Makefile tools/ftimes-sizimus/Makefile tools/ftimes-sortini/Makefile tools/ftimes-xformer/Makefile tools/ftimes-xpa/Makefile tools/hashcp/Makefile tools/map/Makefile tools/tarmap/Makefile tools/zipmap/Makefile"
  additional_testdirs="${additional_testdirs} ftimes-encoder ftimes-xformer tarmap"
  test_makefiles="
${test_makefiles}
tests/ftimes-encoder/Makefile
tests/ftimes-encoder/common/Makefile
tests/ftimes-encoder/common/decode/Makefile
tests/ftimes-encoder/common/decode/test_1/Makefile
tests/ftimes-encoder/common/encode/Makefile
tests/ftimes-encoder/common/encode/test_1/Makefile
tests/ftimes-xformer/Makefile
tests/ftimes-xformer/common/Makefile
tests/ftimes-xformer/common/xform/Makefile
tests/ftimes-xformer/common/xform/test_1/Makefile
tests/tarmap/Makefile
tests/tarmap/common/Makefile
tests/tarmap/common/map/Makefile
tests/tarmap/common/map/test_1/Makefile
tests/tarmap/common/map/test_2/Makefile
"
  case "${target_os}" in
  *mingw32*)
    tool_subdirs="${tool_subdirs} rtimes"
    tool_config_subdirs="${tool_config_subdirs} rtimes"
    tool_makefiles="${tool_makefiles} tools/rtimes/Makefile"
    ;;
  esac
  install_lib_perl="1"
else
  AC_MSG_RESULT(no)
fi

dnl ####################################################################
dnl #
dnl # Set server prefix.
dnl #
dnl ####################################################################

AC_MSG_CHECKING([server prefix])
AC_ARG_WITH(server-prefix,
  [  --with-server-prefix=PREFIX Set server prefix (PREFIX/var by default)],
  [
    case `echo ${withval} | tr "A-Z" "a-z"` in
    ""|n|no|y|ye|yes)
      server_prefix=""
      ;;
    *)
      server_prefix=${withval}
      ;;
    esac
  ],
  [
    server_prefix=${prefix}
  ]
)
AC_MSG_RESULT(${server_prefix})
if test ${install_everything} -ne 0 -o ${install_server} -ne 0 ; then
  if test -z "${server_prefix}" ; then
    AC_MSG_ERROR([*** server prefix is invalid or missing ... try using --with-server-prefix=PREFIX])
  fi
fi
AC_SUBST(server_prefix)

dnl ####################################################################
dnl #
dnl # Finalize pending variables.
dnl #
dnl ####################################################################

if test ${install_lib_perl} -eq 1 ; then
  lib_subdirs="${lib_subdirs} perl"
  lib_makefiles="${lib_makefiles} lib/perl/Makefile.PL"
fi

dnl ####################################################################
dnl #
dnl # Do substitutions.
dnl #
dnl ####################################################################

AC_SUBST(doc_subdirs)
AC_SUBST(etc_subdirs)
AC_SUBST(lib_subdirs)
AC_SUBST(test_subdirs)
AC_SUBST(tool_subdirs)

AC_SUBST(html_files)
AC_SUBST(man1_files)

dnl ####################################################################
dnl #
dnl # Create Makefiles.
dnl #
dnl ####################################################################

AC_CONFIG_FILES(
  [
    Makefile
    Mk/common.mk
    Mk/common-doc-c.mk
    Mk/common-doc-perl.mk
    Mk/common-etc-conf.mk
    Mk/common-src-c.mk
    Mk/common-src-perl.mk
    Mk/common-subdir.mk
    Mk/common-tests.mk
    ${doc_makefiles}
    ${etc_makefiles}
    ${lib_makefiles}
    src/Makefile
    ${test_makefiles}
    ${tool_makefiles}
  ]
)

AC_CONFIG_HEADERS(
  [src/config.h],
  [
    for dir in ${tool_config_subdirs} ; do
      cp -f src/config.h tools/${dir}/
    done
  ],
  [ tool_config_subdirs="${tool_config_subdirs}" ]
)

dnl ####################################################################
dnl #
dnl # FIXME 2008-08-10 mavrik
dnl #
dnl # For some reason, I was unable to get more than one instance of
dnl # AC_CONFIG_COMMANDS to work. If that were possible, I'd have the
dnl # MinGW builds run the following:
dnl #
dnl #   (cd lib/perl && perl config && perl Makefile.PL)
dnl #
dnl # I tried putting the commands in a variable and passing that to
dnl # AC_CONFIG_COMMANDS, but it broke the UNIX builds. For now, the
dnl # following will do, but this issue should be revisited.
dnl #
dnl ####################################################################

if test ${install_lib_perl} -eq 1 ; then
  case "${target_os}" in
  *mingw32*)
    lib_subdirs=""
    ;;
  *)
    AC_CONFIG_COMMANDS(
      [perl-configure],
      [(cd lib/perl && perl Makefile.PL)],
      []
    )
    ;;
  esac
fi

AC_OUTPUT

case "${target_os}" in
*mingw32*)
  echo "Note: To build the Perl modules in this project under MinGW, you must"
  echo "      start a command shell (not an MSYS shell) and run the following"
  echo "      commands:"
  echo
  echo "        cmd> cd <project>\lib\perl"
  echo "        cmd> perl config"
  echo "        cmd> perl Makefile.PL"
  echo "        cmd> dmake"
  echo "        cmd> dmake test"
  echo "        cmd> dmake install"
  echo
  echo "Note: These steps are only required if you plan to test and/or install"
  echo "      the various Perl utilities that are part of the project. You must"
  echo "      have ActiveState Perl 5.8.8 build 822 or higher installed. If you"
  echo "      have nmake available, you can use that instead of dmake."
  echo
  echo "Note: Once you have successfully built and installed the Perl modules,"
  echo "      you may resume the FTimes build process in the MSYS shell."
  ;;
esac
