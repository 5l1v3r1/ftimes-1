#!/usr/bin/perl -w
######################################################################
#
# $Id: test_harness.local,v 1.1 2006/07/14 01:09:47 mavrik Exp $
#
######################################################################

use strict;

######################################################################
#
# GetTestNumber
#
######################################################################

sub GetTestNumber
{
  return "3";
}


######################################################################
#
# This hash controls the order in which tests are performed.
#
######################################################################

  my $phTestNumbers = GetTestNumbers();

  %$phTestNumbers =
  (
    1 => "tree_0r_D4_d3_f6_l2",
  );


######################################################################
#
# This hash holds test descriptions.
#
######################################################################

  my $phTestDescriptions = GetTestDescriptions();

  %$phTestDescriptions =
  (
    'tree_0r_D4_d3_f6_l2' => "tests zero changes to a D4-d3-f6-l2 tree",
  );


######################################################################
#
# This hash holds various test properties.
#
######################################################################

  my $phTestProperties = GetTestProperties();

  %$phTestProperties =
  (
  );


######################################################################
#
# TestGroup_tree_0r_D4_d3_f6_l2
#
######################################################################

sub Hitch_tree_0r_D4_d3_f6_l2
{
  1;
}


sub Check_tree_0r_D4_d3_f6_l2
{
  my ($phProperties) = @_;

  my ($sFile, $sName) = MakeTestName($phProperties);

  my $phTestTargetValues = GetTestTargetValues();

  my $phTestProperties = GetTestProperties();

  my $sTreeMap = $sFile . ".map";

  my $sZBaseline = $sFile . "_z_baseline.map";

  my $sNBaseline = $sFile . "_n_baseline.map";

  ####################################################################
  #
  # The triples format is: baseline, snapshot, and target line count.
  #
  ####################################################################

  my @aTriples =
  (
    "$sTreeMap:$sTreeMap:1",
    "$sTreeMap:$sNBaseline:1",
    "$sTreeMap:$sZBaseline:1",
    "$sNBaseline:$sTreeMap:1",
    "$sNBaseline:$sNBaseline:1",
    "$sNBaseline:$sZBaseline:1",
    "$sZBaseline:$sTreeMap:1",
    "$sZBaseline:$sNBaseline:1",
    "$sZBaseline:$sZBaseline:1",
  );

  foreach my $sTriple (@aTriples)
  {
    my $sCommand;
    my ($sBaseline, $sSnapshot, $sTargetLineCount) = split(/:/, $sTriple, -1);

    $sCommand = "$$phProperties{'TargetProgram'} --compare all $sBaseline $sSnapshot -l 6 2>&1";

    DebugPrint(3, "Command=$sCommand");

    if (!open(PH, "$sCommand |"))
    {
      return "fail";
    }
    binmode(PH);
    my @aLines = <PH>;
    close(PH);

    if ($sTargetLineCount == 1)
    {
      DebugPrint(4, "TargetLineCount=$sTargetLineCount");
      if (scalar(@aLines) != $sTargetLineCount)
      {
        DebugPrint(4, "ActualLineCount=" . scalar(@aLines));
        return "fail";
      }
      $aLines[0] =~ s/[\r\n]*$//;

      my $sTargetOutput = "category|name|changed|unknown";
      DebugPrint(4, "TargetOutput=$sTargetOutput");
      if ($aLines[0] ne $sTargetOutput)
      {
        DebugPrint(4, "ActualOutput=$aLines[0]");
        return "fail";
      }
    }
    else
    {
      return "fail";
    }
  }

  return "pass";
}


sub Clean_tree_0r_D4_d3_f6_l2
{
  my ($phProperties) = @_;

  my ($sFile, $sName) = MakeTestName($phProperties);

  my $sTreeMap = $sFile . ".map";

  my $sZBaseline = $sFile . "_z_baseline.map";

  my $sNBaseline = $sFile . "_n_baseline.map";

  rmtree($sFile, 0, 0);

  foreach my $sFile ($sTreeMap, $sNBaseline, $sZBaseline)
  {
    if (-f $sFile && !unlink($sFile))
    {
      return "fail";
    }
  }

  return "pass";
}


sub Setup_tree_0r_D4_d3_f6_l2
{
  my ($phProperties) = @_;

  my ($sFile, $sName) = MakeTestName($phProperties);

  my $sTreeMap = $sFile . ".map";

  my $sZBaseline = $sFile . "_z_baseline.map";

  my $sNBaseline = $sFile . "_n_baseline.map";

  (my $sTreeBuilder = $0) =~ s/test_harness/tree_builder/;

  if ($$phProperties{'OsClass'} eq "WINDOWS")
  {
    qx(perl $sTreeBuilder -D4 -d3 -f6 -o $sFile > $sTreeMap);
  }
  else
  {
    qx(perl $sTreeBuilder -D4 -d3 -f6 -l2 -o $sFile > $sTreeMap);
  }

  if (!CreateConfig("_config", { 'FieldMask' => "all-magic", 'Compress' => "Y" }))
  {
    return "fail";
  }

  qx($$phProperties{'TargetProgram'} --maplean _config -l 6 $sFile > $sZBaseline);

  qx($$phProperties{'TargetProgram'} --decoder $sZBaseline -l 6 > $sNBaseline);

  return "pass";
}

1;
