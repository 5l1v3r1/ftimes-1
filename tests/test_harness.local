#!/usr/bin/perl -w
######################################################################
#
# $Id: test_harness.local,v 1.12 2014/11/13 20:24:58 mavrik Exp $
#
######################################################################

use strict;

######################################################################
#
# FillFile
#
######################################################################

sub FillFile
{
  my ($sFile, $sPattern, $sCount) = @_;

  if (!open(FH, "> $sFile"))
  {
    return undef;
  }
  binmode(FH);

  if ($sPattern =~ /^fill_byte_loop$/)
  {
    for (my $sValue = 0; $sValue < $sCount; $sValue++)
    {
      if (!print(FH pack("C", ($sValue % 256))))
      {
        return undef;
      }
    }
  }
  elsif ($sPattern =~ /^fill_2_byte_loop$/)
  {
    for (my $sValue = 0; $sValue < $sCount; $sValue++)
    {
      my $sHByte = pack("C", ((($sValue % 65536) >> 8) & 0xff));
      my $sLByte = pack("C", ((($sValue % 65536) >> 0) & 0xff));
      if (!print(FH $sHByte, $sLByte))
      {
        return undef;
      }
    }
  }
  elsif ($sPattern =~ /^fill_4_byte_loop$/)
  {
    for (my $sValue = 0; $sValue < $sCount; $sValue++)
    {
      my $sHHByte = pack("C", ((($sValue % 4294967296) >> 24) & 0xff));
      my $sHLByte = pack("C", ((($sValue % 4294967296) >> 16) & 0xff));
      my $sLHByte = pack("C", ((($sValue % 4294967296) >>  8) & 0xff));
      my $sLLByte = pack("C", ((($sValue % 4294967296) >>  0) & 0xff));
      if (!print(FH $sHHByte, $sHLByte, $sLHByte, $sLLByte))
      {
        return undef;
      }
    }
  }
  else
  {
    my $sValue = $sPattern;
    if (!print(FH $sValue x $sCount))
    {
      return undef;
    }
  }
  close(FH);
}


######################################################################
#
# FTimesUrlDecode
#
######################################################################

sub FTimesUrlDecode
{
  my ($sData) = @_;
  $sData =~ s/\+/ /sg;
  $sData =~ s/%([0-9a-fA-F]{2})/pack('C', hex($1))/seg;
  return $sData;
}


######################################################################
#
# FTimesUrlEncode (Implements the actual URL encoding used by FTimes)
#
######################################################################

sub FTimesUrlEncode
{
  my ($sData) = @_;
  $sData =~ s/([\x00-\x1f\x7f-\xff|"'`%+#])/sprintf("%%%02x", unpack('C',$1))/seg;
  my $sPathSeparatorRegex = ($^O =~ /MSWin(32|64)/i) ? qr{/} : qr{\\};
  $sData =~ s#($sPathSeparatorRegex)#sprintf("%%%02x", unpack('C',$1))#seg;
  $sData =~ s/ /+/sg;
  return $sData;
}


######################################################################
#
# UrlDecode
#
######################################################################

sub UrlDecode
{
  my ($sData) = @_;
  $sData =~ s/\+/ /sg;
  $sData =~ s/%([0-9a-fA-F]{2})/pack('C', hex($1))/seg;
  return $sData;
}


######################################################################
#
# UrlEncode
#
######################################################################

sub UrlEncode
{
  my ($sData) = @_;
  $sData =~ s/([^ -\$&-*,-{}~])/sprintf("%%%02x", unpack('C', $1))/seg;
  $sData =~ s/ /+/sg;
  return $sData;
}

1;
