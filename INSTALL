
1 Overview

  FTimes is a system baselining and evidence collection tool.  The
  primary purpose of FTimes is to gather and/or develop information
  about specified directories and files in a manner conducive to
  intrusion analysis.

  This document explains how to build FTimes, configure an Apache
  Web server to handle FTimes requests, and perform basic client-server
  functionality tests.

  FTimes is available at: http://ftimes.sourceforge.net

1.1 Revision

  $Id: INSTALL,v 1.7 2002/09/11 00:41:34 mavrik Exp $

1.2 Table of Contents

  Section 1 .................... Overview
  Section 1.1 .................. Revision
  Section 1.2 .................. Table of Contents
  Section 1.3 .................. Background
  Section 1.4 .................. Caveats
  Section 2 .................... Building FTimes
  Section 2.1 .................. Requirements
  Section 2.2 .................. Unpack the Source Archive
  Section 2.3 .................. Verify Installation of OpenSSL
  Section 2.4 .................. UNIX Build Instructions
  Section 2.4.1 ................ UNIX Build Gotchas
  Section 2.5 .................. Windows NT/2K Build Instructions
  Section 2.5.1 ................ Windows NT/2K Build Gotchas
  Section 3 .................... Web Server Configuration
  Section 3.1 .................. Requirements
  Section 3.2 .................. CGI Script Setup
  Section 3.2.1 ................ Environment Variables
  Section 3.2.2 ................ CGI Directory Setup
  Section 3.2.3 ................ Script Setup
  Section 3.2.4 ................ Access Control Setup
  Section 3.3 .................. Verify Client-Server Connectivity
  Section 3.3.1 ................ Server Configuration
  Section 3.3.2 ................ Client Configuration
  Section 3.3.3 ................ Testing it Out

1.3 Background

  FTimes is a system baselining and evidence collection tool.  The
  primary purpose of FTimes is to gather and/or develop information
  about specified directories and files in a manner conducive to
  intrusion analysis.

  FTimes is a lightweight tool in the sense that it doesn't need
  to be "installed" on a given system to work on that system, it
  is small enough to fit on a single floppy, and it provides only
  a command line interface.

  Preserving records of all activity that occurs during a snapshot
  is important for intrusion analysis and evidence admissibility.
  For this reason, FTimes was designed to log four types of
  information: configuration settings, progress indicators, metrics,
  and errors.  Output produced by FTimes is delimited text, and
  therefore, is easily assimilated by a wide variety of existing
  tools.

  FTimes basically implements two general capabilities: file
  topography and string search.  File topography is the process of
  mapping key attributes of directories and files on a given file
  system.  String search is the process of digging through directories
  and files on a given file system while looking for a specific
  sequence of bytes.  Respectively, these capabilities are referred
  to as map mode and dig mode.

  FTimes supports two operating environments: workbench and
  client-server.  In the workbench environment, the operator uses
  FTimes to do things such as examine evidence (e.g., a disk image
  or files from a compromised system), analyze snapshots for change,
  search for files that have specific attributes, verify file
  integrity, and so on.  In the client-server environment, the
  focus shifts from what the operator can do locally to how the
  operator can efficiently monitor, manage, and aggregate snapshot
  data for many hosts.  In the client-server environment, the
  primary goal is to move collected data from the host to a
  centralized system, known as an Integrity Server, in a secure
  and authenticated fashion.  An Integrity Server is a hardened
  system that has been configured to handle FTimes GET, PING, and
  PUT HTTP/S requests.

  The FTimes distribution contains a script called nph-ftimes.cgi
  that may be used in conjunction with a Web server to implement
  a public Integrity Server interface.  Deeper topics such as the
  construction and internal mechanics of an Integrity Server are
  not addressed in this document.

1.4 Caveats

  The various programs and scripts referenced throughout this
  document are generally specified using relative paths.  To avoid
  potential complications, you can either make sure that your PATH
  environment variable is configured properly or provide full path
  information as needed.

2 Building FTimes

  This section describes the process for building and installing
  FTimes.

2.1 Requirements

  Building FTimes in a UNIX environments requires at least the
  following tools: make, gcc, and possibly autoconf.  For Windows
  NT/2K environments Visual Studio is required.  By default, SSL
  support is enabled in FTimes.  This means that OpenSSL must be
  be installed and/or available on the build system.

2.2 Unpack the Source Archive

  The source archive needs to be unpacked in a suitable location
  before the build process can commence.  All commands presented
  in this section attempt to unpack the source archive in the
  current working directory.

  On UNIX platforms this can be accomplished as follows:

    tar -zxvf <archive>

  If your version of tar doesn't support the 'z' flag, then try
  the following command pipeline:

    gunzip -c <archive> | tar -xvf -

  On Windows platforms WinZip may be used to unpack the archive.
  Since the source archive is actually a gzipped tar file, WinZip
  will ask if you wish to decompress and open it -- answer yes.
  The command line syntax for WinZip is given here:

    winzip32.exe -min -e <archive>

2.3 Verify Installation of OpenSSL

  By default, SSL support is enabled in FTimes.  This means that
  OpenSSL must be installed and/or available on the build system.
  The OpenSSL Web site is located at http://www.openssl.org.  Refer
  to OpenSSL's documentation for details on how to do this.

2.4 UNIX Build Instructions

  Typically, the build process is simply a matter of running
  configure and make.  In general, you are not required to specify
  any extra options/arguments when invoking either command.  The
  most basic build sequence is as follows:

    ./configure
    make

  By default, SSL support is enabled.  This means that the configure
  script will attempt to locate OpenSSL on your system.  If OpenSSL
  is not found in one of several common locations, the script will
  abort.  To override this behavior and explicitly specify OpenSSL's
  location, use the --with-ssl=DIR option.  For example, if your
  copy of OpenSSL was installed in /usr/local/my_openssl, the build
  sequence would be as follows:

    ./configure --with-ssl=/usr/local/my_openssl
    make

  To disable SSL support altogether, use the --without-ssl option
  as follows:

    ./configure --without-ssl
    make

  FTimes also supports file typing via XMagic and block/character
  device includes.  If either of these capabilities is desired,
  pass the appropriate flag to configure (either --enable-xmagic
  or --enable-devices).

  FTimes' default installation directory is /usr/local/integrity.
  If you want to install in a different location, set the --prefix
  configure option.  For example, if you wanted to install in the
  directory /usr/local/my_ftimes, the build sequence would be as
  follows:

    ./configure --prefix=/usr/local/my_ftimes
    make

  When the software has been built to your satisfaction, it can be
  installed with the following command:

    make install

2.4.1 UNIX Build Gotchas

  When experimenting with different build/configure options, be
  sure to do a "make clean-all" between builds.  This ensures that
  any intermediate files are removed.  In certain situations, build
  problems could arise if this is not done.

2.5 Windows NT/2K Build Instructions

  FTimes has compiled successfully on Windows NT/2K using Microsoft's
  Visual Studio.  The build process is simply a matter of setting
  up a build environment and running nmake.  Windows NT/2K binaries
  are built using the following Makefile: Makefile.vs.  Note that
  there is no equivalent configure process for NT/2K builds.

  When building FTimes from the command line, you may need to run
  the batch script VCVARS32.BAT to establish a build environment.
  One quick test is to check the LIB and INCLUDE variables with:

    set LIB
    set INCLUDE

  If neither of those variables are defined or you are in doubt,
  run VCVARS32.BAT.  Usually, this script is kept in Visual Studio's
  bin directory.  Once you have located the script, simply execute
  it.

  Because SSL support is enabled by default, you need to make sure
  that the SSL_DIR macro in Makefile.vs has an appropriate value.
  Basically, Makefile.vs was written with the assumption that your
  version of OpenSSL was installed in C:\OpenSSL.  Adjust SSL_DIR
  as necessary, if this is not the case.

  Assuming that 1) you do need to run VCVARS32.BAT and 2) the
  OpenSSL libraries and header files are installed in C:\OpenSSL,
  the build sequence would be as follows:

    VCVARS32.BAT
    nmake -f Makefile.vs

  If you don't want SSL support, set the USE_SSL macro to 'N'.
  This can be done from the command line as follows:

    nmake -f Makefile.vs USE_SSL=N

  If you want to turn on debugging, set the BUILD_TYPE macro to
  'DEBUG'.  This can be done from the command line as follows:

    nmake -f Makefile.vs BUILD_TYPE=DEBUG

  FTimes also supports file typing via XMagic.  To enable this
  capability, set the USE_XMAGIC macro to 'Y'.

  The various macros described in this section may be combined in
  any given build.  For example, to build a debug release without
  SSL support, invoke nmake as follows:

    nmake -f Makefile.vs BUILD_TYPE=DEBUG USE_SSL=N

  When the software has been built to your satisfaction, it can be
  installed with the following command:

    nmake -f Makefile.vs install

  FTimes' default installation directory is C:\Integrity.  If you
  want to install in a different location, adjust the FTIMES_DIR
  macro as appropriate -- either in the makefile or on the command
  line.  For example, to install FTimes in the 'Program Files'
  directory, invoke nmake as follows:

    nmake -f Makefile.vs install FTIMES_DIR="C:\Program Files\FTimes"

2.5.1 Windows NT/2K Build Gotchas

  You may have trouble compiling with nmake if your environment
  settings aren't correct.  When this happens, try running the
  batch file VCVARS32.BAT provided with Visual Studio.  If all else
  fails, try creating a Visual Studio project and import the source
  code.

  When experimenting with different build options (e.g. BUILD_TYPE,
  USE_SSL, etc.), be sure to do a "make clean-all" between builds.

    nmake -f Makefile.vs clean-all

  This will ensure that everything is rebuilt correctly.  In certain
  situations, build problems could arise if this is not done.

3 Web Server Configuration

  This section describes how to configure an Apache Web server
  running on a UNIX platform to handle FTimes requests.  It is
  assumed that Apache is installed and running correctly.

  Throughout this section, the terms username and clientid are used
  interchangeably.  By default, nph-ftimes.cgi expects a clientid
  to conform to the following scheme:

    CDDD_CCCC_DDDD_D

  Where 'C' is [A-Z] and 'D' is [0-9].  The breakdown for each group
  within the scheme is as follows:

    CDDD - Server ID (e.g., S001)
    CCCC - Company Abbreviation (e.g., EXDS)
    DDDD - Host ID
       D - Profile

3.1 Requirements

  To configure a UNIX based Apache Web server to handle FTimes
  requests you will need nph-ftimes.cgi, Apache, and Perl.

  The name of the FTimes CGI script must begin with the string
  "nph-".  This naming convention, which stands for Non Parsed
  Headers, informs the Web server that the CGI application is
  responsible for generating the entire HTTP response.  Non Parsed
  Headers are used by this application because they allow it to
  take full advantage of HTTP status code extensions.  This simplifies
  client-side error checking without giving up the ability to
  generate application specific responses.

  The tree structure depicted below must be created on the Web
  server to support processing of FTimes requests.

  integrity
    |
    - incoming
    |   |
    |   - clientid_timestamp_runtype.out
    |   - clientid_timestamp_runtype.err
    |   - clientid_timestamp_runtype.env
    |   - clientid_timestamp_runtype.rdy
    |   - ...
    |   |
    - logfiles
    |   |
    |   - nph-ftimes.log
    |
    - profiles
        |
        - <clientid-1>
        |   |
        |   - cfgfiles
        |       |
        |       - dig.cfg
        |       - map.cfg
        |
        - <clientid-2>
        - ...

  The incoming directory is where uploaded snapshots are stored.
  Files in this directory are created automatically as snapshots
  are posted to the server.

  The logfiles directory is self-explanatory.

  The profiles directory contains one directory for each client
  profile (i.e. clientid) that is managed by the server.  Each
  clientid directory contains a cfgfiles directory.  This is where
  the dig and map config files are kept.  Clients may download
  either of these files by running FTimes in get mode.

3.2 CGI Script Setup

 This section describes how to install nph-ftimes.cgi.  It also
 explains how to modify Apache's configuration to recognize the
 script's location and restrict access to the script through basic
 authentication.

3.2.1 Environment Variables

  The variable $APACHE_DIR refers to the location where Apache is
  installed.  This document assumes that $APACHE_DIR is set to the
  value "/usr/local/apache".  Set this variable on your system as
  follows:

  Bourne shell variants:

    export APACHE_DIR=/usr/local/apache

  C shell variants:

    setenv APACHE_DIR /usr/local/apache

  The variable $CGI_DIR refers to the location where nph-ftimes.cgi
  will be installed.  This document assumes that $CGI_DIR is set
  to the value "$APACHE_DIR/cgi-ftimes".  Set this variable on your
  system as follows:

  Bourne shell variants:

    export CGI_DIR=$APACHE_DIR/cgi-ftimes

  C shell variants:

    setenv CGI_DIR $APACHE_DIR/cgi-ftimes

  For the remainder of this document, it is assumed that you have
  set these variables.

3.2.2 CGI Directory Setup

  The script nph-ftimes.cgi should be installed in a directory that
  is strictly dedicated to one purpose: access control.  The major
  factor here is that this application is designed to write data
  to the server's local disk.  Whenever access of this kind is
  allowed by potentially hostile clients, you want to maintain a
  tight rein.

  If your environment is set up as described in section 3.2.1, you
  may create a dedicated CGI directory as follows:

    mkdir -m 755 $CGI_DIR
    chown 0:0 $CGI_DIR

  Next, assuming that you have just created a script directory that
  Apache is not yet aware of, you will need to update httpd.conf.
  Locate this file and place the following snippet in the alias
  section.  The alias section may be located by searching for the
  following string: <IfModule mod_alias.c>

  Note: make sure you replace $CGI_DIR with its literal value.

    --- snippet ---
    ScriptAlias /cgi-ftimes/ "$CGI_DIR/"

    <Directory "$CGI_DIR">
        AllowOverride AuthConfig
        Options None
        Order allow,deny
        Allow from all
    </Directory>
    --- snippet ---

  After modifying httpd.conf, you should verify its syntax and, if
  that is successful, signal Apache to restart.  To verify syntax
  use the following command:

    apachectl configtest

  If necessary, correct syntax errors.  Otherwise, tell Apache to
  restart with:

    apachectl restart

  At this point, you are ready to install nph-ftimes.cgi.

3.2.3 Script Setup

  Locate nph-ftimes.cgi in the FTimes distribution tree.  It should
  be in the cgi directory.  Change to this directory, and install
  the script in $CGI_DIR as follows:

    cp nph-ftimes.cgi $CGI_DIR
    chmod 755 $CGI_DIR/nph-ftimes.cgi
    chown 0:0 $CGI_DIR/nph-ftimes.cgi

  Verify that your Perl interpreter is located at /usr/bin/perl.
  If this is not the case, modify line one of the script to reflect
  the true location of the interpreter.  Line one of the script
  looks like this:

    --- snippet ---
    #!/usr/bin/perl
    --- snippet ---

  Next, you need to create the following tree structure:

  integrity
    |
    - incoming
    |
    - logfiles
    |
    - profiles

  By default, nph-ftimes.cgi expects to find this tree in /integrity.
  If you desire a different location, edit the script and modify
  the $baseDirectory variable as appropriate.  Otherwise, use the
  following command sequence to create the tree.  However, before
  doing this, you need to determine the uid or username that Apache
  uses.  This document assumes that Apache runs in the context of
  the user nobody.  If your configuration is different, replace
  nobody with the appropriate username as necessary.

    mkdir -m 755 /integrity
    chown 0:0 /integrity
    cd /integrity
    mkdir -m 755 incoming logfiles profiles
    chown nobody:0 incoming

  Finally, you need to create the nph-ftimes log file.  This is
  done as follows:

    touch /integrity/logfiles/nph-ftimes.log
    chown nobody:0 /integrity/logfiles/nph-ftimes.log
    chmod 644 /integrity/logfiles/nph-ftimes.log

  The final configuration objective to establish an access control
  mechanism.

3.2.4 Access Control Setup

  By default, nph-ftimes.cgi expects Apache's basic authentication
  to be enabled.  Therefore, you'll need to create and install an
  access file in $CGI_DIR.  To determine the name of access files
  on your system, check the AccessFileName directive in httpd.conf.
  Typically, this directive contains the value .htaccess.  The
  following snippet may be used to create a suitable access file.

  Note: Be sure to replace $APACHE_DIR with its literal value.

    --- snippet ---
    AuthType Basic
    AuthName "FTimes Realm"
    AuthUserFile $APACHE_DIR/htusers
    require valid-user
    --- snippet ---

  Assuming that Apache's AccessFileName directive contains the
  value .htaccess,  the following command sequence may be used to
  create and install a suitable access file in $CGI_DIR.

    echo "AuthType Basic" > $CGI_DIR/.htaccess
    echo "AuthName 'FTimes Realm'" >> $CGI_DIR/.htaccess
    echo "AuthUserFile $APACHE_DIR/htusers" >> $CGI_DIR/.htaccess
    echo "require valid-user" >> $CGI_DIR/.htaccess
    chmod 644 $CGI_DIR/.htaccess
    chown 0:0 $CGI_DIR/.htaccess

  To complete access control setup, you must create a new password
  file and insert a user.  The purpose of the AuthUserFile directive
  is to bind a particular access file to a particular password
  file.  Therefore, be sure to use the filename assigned to
  AuthUserFile when creating the password file.  The following
  command will create a new password file and insert an entry for
  the user S001_TEST_0001_1.  You will be prompted to enter the
  user's password.

    htpasswd -c $APACHE_DIR/htusers S001_TEST_0001_1

  Set the permissions and ownership on this file as follows:

    chmod 644 $APACHE_DIR/htusers
    chown 0:0 $APACHE_DIR/htusers

  Finally, verify that the password file is not accessible to remote
  Web browsers.

  Once you have established a working authentication scheme, you
  are ready to begin testing client-server connectivity.

3.3 Verify Client-Server Connectivity

  Before tackling this section, read the FTimes' man page.  Pay
  particular attention to information regarding get mode.

  The purpose of this section is to test connectivity.  This will
  be done by configuring FTimes to run in get mode and request a
  config file from the server.  In section 3.2.4 you created an
  access file on the server and inserted the user S001_TEST_0001_1.
  Get the password for that user handy.  You will need it in the
  coming sections to complete the verification process.

3.3.1 Server Configuration

  On the server you need to create directories for S001_TEST_0001_1
  and insert the following config file as map.cfg.

  The directories may be created as follows:

    umask 22
    cd /integrity/profiles
    mkdir -p -m 755 S001_TEST_0001_1/cfgfiles
    chown -R 0:0 S001_TEST_0001_1

  Goto /integrity/profiles/S001_TEST_0001_1/cfgfiles, and create
  map.cfg.  Make sure you replace <password> with its real value.
  Also, don't forget to modify URLPutURL as appropriate.

    --- map.cfg ---
    BaseName=S001_TEST_0001_1
    OutDir=.
    URLPutSnapshot=Y
    URLPutURL=http://web.server.net/cgi-ftimes/nph-ftimes.cgi
    URLUsername=S001_TEST_0001_1
    URLPassword=<password>
    URLAuthType=basic
    URLCreateConfig=Y
    Include=/tmp # or c:\temp
    FieldMask=ALL-magic
    --- map.cfg ---

3.3.2 Client Configuration

  On the client you need to install FTimes, and create the following
  config file as get.cfg.  Refer to section 2 for more information
  on how to install FTimes.

  Goto /tmp or some other suitable location, and create get.cfg.
  Make sure you replace <password> with its real value.  Also,
  don't forget to modify URLGetURL as appropriate.

    --- get.cfg ---
    BaseName=S001_TEST_0001_1
    GetAndExec=N
    GetFileName=remote.cfg
    URLGetURL=http://web.server.net/cgi-ftimes/nph-ftimes.cgi
    URLUsername=S001_TEST_0001_1
    URLPassword=<password>
    URLAuthType=basic
    URLGetRequest=MapConfig
    --- get.cfg ---

  To avoid having to type a long path each time you invoke FTimes,
  you may want to add /usr/local/integrity/bin to your path.

3.3.3 Testing it Out

  At this point you are ready to test client-server connectivity.
  Run the following command from the client.  It should produce a
  file named remote.cfg in the current directory.

    ftimes --getmode get.cfg

  If that worked, your almost there.  Enable the GetAndExec control
  in get.cfg, and rerun FTimes.  This should produce three files
  in the client's current working directory and four files in the
  server's incoming directory.  If these files don't exist, double
  check FTimes' return status.  Also, check Apache's log files and
  nph-ftimes.log for any signs of trouble.

